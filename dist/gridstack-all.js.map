{"version":3,"file":"gridstack-all.js","mappings":"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","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, () => {\nreturn ","/**\r\n * dd-base-impl.ts 7.3.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nexport type EventCallback = (event: Event) => boolean|void;\r\nexport abstract class DDBaseImplement {\r\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\r\n  public get disabled(): boolean   { return this._disabled; }\r\n\r\n  /** @internal */\r\n  protected _disabled: boolean; // initial state to differentiate from false\r\n  /** @internal */\r\n  protected _eventRegister: {\r\n    [eventName: string]: EventCallback;\r\n  } = {};\r\n\r\n  public on(event: string, callback: EventCallback): void {\r\n    this._eventRegister[event] = callback;\r\n  }\r\n\r\n  public off(event: string): void {\r\n    delete this._eventRegister[event];\r\n  }\r\n\r\n  public enable(): void {\r\n    this._disabled = false;\r\n  }\r\n\r\n  public disable(): void {\r\n    this._disabled = true;\r\n  }\r\n\r\n  public destroy(): void {\r\n    delete this._eventRegister;\r\n  }\r\n\r\n  public triggerEvent(eventName: string, event: Event): boolean|void {\r\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\r\n      return this._eventRegister[eventName](event);\r\n  }\r\n}\r\n\r\nexport interface HTMLElementExtendOpt<T> {\r\n  el: HTMLElement;\r\n  option: T;\r\n  updateOption(T): DDBaseImplement;\r\n}\r\n","/**\r\n * dd-draggable.ts 7.3.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { DDManager } from './dd-manager';\r\nimport { Utils } from './utils';\r\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\r\nimport { GridItemHTMLElement, DDUIData } from './types';\r\nimport { DDElementHost } from './dd-element';\r\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\r\n\r\n// TODO: merge with DDDragOpt ?\r\nexport interface DDDraggableOpt {\r\n  appendTo?: string | HTMLElement;\r\n  handle?: string;\r\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\r\n  // containment?: string | HTMLElement; // TODO: not implemented yet\r\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\r\n  // scroll?: boolean; // native support by HTML5 drag drop, can't be switch to off actually\r\n  start?: (event: Event, ui: DDUIData) => void;\r\n  stop?: (event: Event) => void;\r\n  drag?: (event: Event, ui: DDUIData) => void;\r\n}\r\n\r\ninterface DragOffset {\r\n  left: number;\r\n  top: number;\r\n  width: number;\r\n  height: number;\r\n  offsetLeft: number;\r\n  offsetTop: number;\r\n}\r\n\r\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\r\n\r\n// let count = 0; // TEST\r\n\r\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\r\n  public el: HTMLElement;\r\n  public option: DDDraggableOpt;\r\n  public helper: HTMLElement; // used by GridStackDDNative\r\n\r\n  /** @internal */\r\n  protected mouseDownEvent: MouseEvent;\r\n  /** @internal */\r\n  protected dragOffset: DragOffset;\r\n  /** @internal */\r\n  protected dragElementOriginStyle: Array<string>;\r\n  /** @internal */\r\n  protected dragEl: HTMLElement;\r\n  /** @internal true while we are dragging an item around */\r\n  protected dragging: boolean;\r\n  /** @internal */\r\n  protected parentOriginStylePosition: string;\r\n  /** @internal */\r\n  protected helperContainment: HTMLElement;\r\n  /** @internal properties we change during dragging, and restore back */\r\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\r\n  /** @internal pause before we call the actual drag hit collision code */\r\n  protected dragTimeout: number;\r\n\r\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\r\n    super();\r\n    this.el = el;\r\n    this.option = option;\r\n    // get the element that is actually supposed to be dragged by\r\n    let handleName = option.handle.substring(1);\r\n    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\r\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n    this._mouseDown = this._mouseDown.bind(this);\r\n    this._mouseMove = this._mouseMove.bind(this);\r\n    this._mouseUp = this._mouseUp.bind(this);\r\n    this.enable();\r\n  }\r\n\r\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\r\n    super.on(event, callback);\r\n  }\r\n\r\n  public off(event: DDDragEvent): void {\r\n    super.off(event);\r\n  }\r\n\r\n  public enable(): void {\r\n    if (this.disabled === false) return;\r\n    super.enable();\r\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\r\n    if (isTouch) {\r\n      this.dragEl.addEventListener('touchstart', touchstart);\r\n      this.dragEl.addEventListener('pointerdown', pointerdown);\r\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\r\n    }\r\n    this.el.classList.remove('ui-draggable-disabled');\r\n    this.el.classList.add('ui-draggable');\r\n  }\r\n\r\n  public disable(forDestroy = false): void {\r\n    if (this.disabled === true) return;\r\n    super.disable();\r\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\r\n    if (isTouch) {\r\n      this.dragEl.removeEventListener('touchstart', touchstart);\r\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\r\n    }\r\n    this.el.classList.remove('ui-draggable');\r\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\r\n  }\r\n\r\n  public destroy(): void {\r\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\r\n    delete this.dragTimeout;\r\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\r\n    this.disable(true);\r\n    delete this.el;\r\n    delete this.helper;\r\n    delete this.option;\r\n    super.destroy();\r\n  }\r\n\r\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\r\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call when mouse goes down before a dragstart happens */\r\n  protected _mouseDown(e: MouseEvent): boolean {\r\n    // don't let more than one widget handle mouseStart\r\n    if (DDManager.mouseHandled) return;\r\n    if (e.button !== 0) return true; // only left click\r\n\r\n    // make sure we are not clicking on known object that handles mouseDown (TODO: make this extensible ?) #2054\r\n    const skipMouseDown = ['input', 'textarea', 'button', 'select', 'option'];\r\n    const name = (e.target as HTMLElement).nodeName.toLowerCase();\r\n    if (skipMouseDown.find(skip => skip === name)) return true;\r\n    // also check for content editable\r\n    if ((e.target as HTMLElement).closest('[contenteditable=\"true\"]')) return true;\r\n\r\n    // REMOVE: why would we get the event if it wasn't for us or child ?\r\n    // make sure we are clicking on a drag handle or child of it...\r\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\r\n    // let className = this.option.handle.substring(1);\r\n    // let el = e.target as HTMLElement;\r\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\r\n    // if (!el) return;\r\n\r\n    this.mouseDownEvent = e;\r\n    delete this.dragging;\r\n    delete DDManager.dragElement;\r\n    delete DDManager.dropElement;\r\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\r\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\r\n    document.addEventListener('mouseup', this._mouseUp, true);\r\n    if (isTouch) {\r\n      this.dragEl.addEventListener('touchmove', touchmove);\r\n      this.dragEl.addEventListener('touchend', touchend);\r\n    }\r\n\r\n    e.preventDefault();\r\n    // preventDefault() prevents blur event which occurs just after mousedown event.\r\n    // if an editable content has focus, then blur must be call\r\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\r\n\r\n    DDManager.mouseHandled = true;\r\n    return true;\r\n  }\r\n\r\n  /** @internal method to call actual drag event */\r\n  protected _callDrag(e: DragEvent): void {\r\n    if (!this.dragging) return;\r\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\r\n    if (this.option.drag) {\r\n      this.option.drag(ev, this.ui());\r\n    }\r\n    this.triggerEvent('drag', ev);\r\n  }\r\n\r\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\r\n  protected _mouseMove(e: DragEvent): boolean {\r\n    // console.log(`${count++} move ${e.x},${e.y}`)\r\n    let s = this.mouseDownEvent;\r\n\r\n    if (this.dragging) {\r\n      this._dragFollow(e);\r\n      // delay actual grid handling drag until we pause for a while if set\r\n      if (DDManager.pauseDrag) {\r\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\r\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\r\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\r\n      } else {\r\n        this._callDrag(e);\r\n      }\r\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\r\n      /**\r\n       * don't start unless we've moved at least 3 pixels\r\n       */\r\n      this.dragging = true;\r\n      DDManager.dragElement = this;\r\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\r\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\r\n      if (grid) {\r\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\r\n      } else {\r\n        delete DDManager.dropElement;\r\n      }\r\n      this.helper = this._createHelper(e);\r\n      this._setupHelperContainmentStyle();\r\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\r\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\r\n\r\n      this._setupHelperStyle(e);\r\n      if (this.option.start) {\r\n        this.option.start(ev, this.ui());\r\n      }\r\n      this.triggerEvent('dragstart', ev);\r\n    }\r\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\r\n    return true;\r\n  }\r\n\r\n  /** @internal call when the mouse gets released to drop the item at current location */\r\n  protected _mouseUp(e: MouseEvent): void {\r\n    document.removeEventListener('mousemove', this._mouseMove, true);\r\n    document.removeEventListener('mouseup', this._mouseUp, true);\r\n    if (isTouch) {\r\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\r\n      this.dragEl.removeEventListener('touchend', touchend, true);\r\n    }\r\n    if (this.dragging) {\r\n      delete this.dragging;\r\n\r\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\r\n      if (DDManager.dropElement?.el === this.el.parentElement) {\r\n        delete DDManager.dropElement;\r\n      }\r\n\r\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\r\n      if (this.helper === this.el) {\r\n        this._removeHelperStyle();\r\n      } else {\r\n        this.helper.remove();\r\n      }\r\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\r\n      if (this.option.stop) {\r\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\r\n      }\r\n      this.triggerEvent('dragstop', ev);\r\n\r\n      // call the droppable method to receive the item\r\n      if (DDManager.dropElement) {\r\n        DDManager.dropElement.drop(e);\r\n      }\r\n    }\r\n    delete this.helper;\r\n    delete this.mouseDownEvent;\r\n    delete DDManager.dragElement;\r\n    delete DDManager.dropElement;\r\n    delete DDManager.mouseHandled;\r\n    e.preventDefault();\r\n  }\r\n\r\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\r\n  protected _createHelper(event: DragEvent): HTMLElement {\r\n    let helper = this.el;\r\n    if (typeof this.option.helper === 'function') {\r\n      helper = this.option.helper(event);\r\n    } else if (this.option.helper === 'clone') {\r\n      helper = Utils.cloneNode(this.el);\r\n    }\r\n    if (!document.body.contains(helper)) {\r\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\r\n    }\r\n    if (helper === this.el) {\r\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\r\n    }\r\n    return helper;\r\n  }\r\n\r\n  /** @internal set the fix position of the dragged item */\r\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\r\n    this.helper.classList.add('ui-draggable-dragging');\r\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\r\n    const style = this.helper.style;\r\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\r\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\r\n    style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\r\n    style.width = this.dragOffset.width + 'px';\r\n    style.height = this.dragOffset.height + 'px';\r\n    style.willChange = 'left, top';\r\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\r\n    this._dragFollow(e); // now position it\r\n    style.transition = 'none'; // show up instantly\r\n    setTimeout(() => {\r\n      if (this.helper) {\r\n        style.transition = null; // recover animation\r\n      }\r\n    }, 0);\r\n    return this;\r\n  }\r\n\r\n  /** @internal restore back the original style before dragging */\r\n  protected _removeHelperStyle(): DDDraggable {\r\n    this.helper.classList.remove('ui-draggable-dragging');\r\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\r\n    // don't bother restoring styles if we're gonna remove anyway...\r\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\r\n      let helper = this.helper;\r\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\r\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\r\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\r\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\r\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\r\n      let transition = this.dragElementOriginStyle['transition'] || null;\r\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\r\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\r\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\r\n    }\r\n    delete this.dragElementOriginStyle;\r\n    return this;\r\n  }\r\n\r\n  /** @internal updates the top/left position to follow the mouse */\r\n  protected _dragFollow(e: DragEvent): void {\r\n    let containmentRect = { left: 0, top: 0 };\r\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\r\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\r\n    //   containmentRect = { left, top };\r\n    // }\r\n    const style = this.helper.style;\r\n    const offset = this.dragOffset;\r\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\r\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setupHelperContainmentStyle(): DDDraggable {\r\n    this.helperContainment = this.helper.parentElement;\r\n    if (this.helper.style.position !== 'fixed') {\r\n      this.parentOriginStylePosition = this.helperContainment.style.position;\r\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\r\n        this.helperContainment.style.position = 'relative';\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\r\n\r\n    // in case ancestor has transform/perspective css properties that change the viewpoint\r\n    let xformOffsetX = 0;\r\n    let xformOffsetY = 0;\r\n    if (parent) {\r\n      const testEl = document.createElement('div');\r\n      Utils.addElStyles(testEl, {\r\n        opacity: '0',\r\n        position: 'fixed',\r\n        top: 0 + 'px',\r\n        left: 0 + 'px',\r\n        width: '1px',\r\n        height: '1px',\r\n        zIndex: '-999999',\r\n      });\r\n      parent.appendChild(testEl);\r\n      const testElPosition = testEl.getBoundingClientRect();\r\n      parent.removeChild(testEl);\r\n      xformOffsetX = testElPosition.left;\r\n      xformOffsetY = testElPosition.top;\r\n      // TODO: scale ?\r\n    }\r\n\r\n    const targetOffset = el.getBoundingClientRect();\r\n    return {\r\n      left: targetOffset.left,\r\n      top: targetOffset.top,\r\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\r\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\r\n      width: targetOffset.width,\r\n      height: targetOffset.height\r\n    };\r\n  }\r\n\r\n  /** @internal TODO: set to public as called by DDDroppable! */\r\n  public ui(): DDUIData {\r\n    const containmentEl = this.el.parentElement;\r\n    const containmentRect = containmentEl.getBoundingClientRect();\r\n    const offset = this.helper.getBoundingClientRect();\r\n    return {\r\n      position: { //Current CSS position of the helper as { top, left } object\r\n        top: offset.top - containmentRect.top,\r\n        left: offset.left - containmentRect.left\r\n      }\r\n      /* not used by GridStack for now...\r\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\r\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\r\n      */\r\n    };\r\n  }\r\n}\r\n","/**\r\n * dd-droppable.ts 7.3.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { DDDraggable } from './dd-draggable';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\r\nimport { Utils } from './utils';\r\nimport { DDElementHost } from './dd-element';\r\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\r\nimport { DDUIData } from './types';\r\n\r\nexport interface DDDroppableOpt {\r\n  accept?: string | ((el: HTMLElement) => boolean);\r\n  drop?: (event: DragEvent, ui: DDUIData) => void;\r\n  over?: (event: DragEvent, ui: DDUIData) => void;\r\n  out?: (event: DragEvent, ui: DDUIData) => void;\r\n}\r\n\r\n// let count = 0; // TEST\r\n\r\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\r\n\r\n  public accept: (el: HTMLElement) => boolean;\r\n  public el: HTMLElement;\r\n  public option: DDDroppableOpt;\r\n\r\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\r\n    super();\r\n    this.el = el;\r\n    this.option = opts;\r\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n    this._mouseEnter = this._mouseEnter.bind(this);\r\n    this._mouseLeave = this._mouseLeave.bind(this);\r\n    this.enable();\r\n    this._setupAccept();\r\n  }\r\n\r\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\r\n    super.on(event, callback);\r\n  }\r\n\r\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\r\n    super.off(event);\r\n  }\r\n\r\n  public enable(): void {\r\n    if (this.disabled === false) return;\r\n    super.enable();\r\n    this.el.classList.add('ui-droppable');\r\n    this.el.classList.remove('ui-droppable-disabled');\r\n    this.el.addEventListener('mouseenter', this._mouseEnter);\r\n    this.el.addEventListener('mouseleave', this._mouseLeave);\r\n    if (isTouch) {\r\n      this.el.addEventListener('pointerenter', pointerenter);\r\n      this.el.addEventListener('pointerleave', pointerleave);\r\n    }\r\n  }\r\n\r\n  public disable(forDestroy = false): void {\r\n    if (this.disabled === true) return;\r\n    super.disable();\r\n    this.el.classList.remove('ui-droppable');\r\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\r\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\r\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\r\n    if (isTouch) {\r\n      this.el.removeEventListener('pointerenter', pointerenter);\r\n      this.el.removeEventListener('pointerleave', pointerleave);\r\n    }\r\n  }\r\n\r\n  public destroy(): void {\r\n    this.disable(true);\r\n    this.el.classList.remove('ui-droppable');\r\n    this.el.classList.remove('ui-droppable-disabled');\r\n    super.destroy();\r\n  }\r\n\r\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\r\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n    this._setupAccept();\r\n    return this;\r\n  }\r\n\r\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\r\n  protected _mouseEnter(e: MouseEvent): void {\r\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\r\n    if (!DDManager.dragElement) return;\r\n    if (!this._canDrop(DDManager.dragElement.el)) return;\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\r\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\r\n      DDManager.dropElement._mouseLeave(e as DragEvent);\r\n    }\r\n    DDManager.dropElement = this;\r\n\r\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\r\n    if (this.option.over) {\r\n      this.option.over(ev, this._ui(DDManager.dragElement))\r\n    }\r\n    this.triggerEvent('dropover', ev);\r\n    this.el.classList.add('ui-droppable-over');\r\n    // console.log('tracking'); // TEST\r\n  }\r\n\r\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\r\n  protected _mouseLeave(e: MouseEvent): void {\r\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\r\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\r\n    if (this.option.out) {\r\n      this.option.out(ev, this._ui(DDManager.dragElement))\r\n    }\r\n    this.triggerEvent('dropout', ev);\r\n\r\n    if (DDManager.dropElement === this) {\r\n      delete DDManager.dropElement;\r\n      // console.log('not tracking'); // TEST\r\n\r\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\r\n      let parentDrop: DDDroppable;\r\n      let parent: DDElementHost = this.el.parentElement;\r\n      while (!parentDrop && parent) {\r\n        parentDrop = parent.ddElement?.ddDroppable;\r\n        parent = parent.parentElement;\r\n      }\r\n      if (parentDrop) {\r\n        parentDrop._mouseEnter(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\r\n  public drop(e: MouseEvent): void {\r\n    e.preventDefault();\r\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\r\n    if (this.option.drop) {\r\n      this.option.drop(ev, this._ui(DDManager.dragElement))\r\n    }\r\n    this.triggerEvent('drop', ev);\r\n  }\r\n\r\n  /** @internal true if element matches the string/method accept option */\r\n  protected _canDrop(el: HTMLElement): boolean {\r\n    return el && (!this.accept || this.accept(el));\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setupAccept(): DDDroppable {\r\n    if (!this.option.accept) return this;\r\n    if (typeof this.option.accept === 'string') {\r\n      this.accept = (el: HTMLElement) => el.matches(this.option.accept as string);\r\n    } else {\r\n      this.accept = this.option.accept;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _ui(drag: DDDraggable): DDUIData {\r\n    return {\r\n      draggable: drag.el,\r\n      ...drag.ui()\r\n    };\r\n  }\r\n}\r\n\r\n","/**\r\n * dd-elements.ts 7.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\r\nimport { GridItemHTMLElement } from './types';\r\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\r\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\r\n\r\nexport interface DDElementHost extends GridItemHTMLElement {\r\n  ddElement?: DDElement;\r\n}\r\n\r\nexport class DDElement {\r\n\r\n  static init(el: DDElementHost): DDElement {\r\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\r\n    return el.ddElement;\r\n  }\r\n\r\n  public el: DDElementHost;\r\n  public ddDraggable?: DDDraggable;\r\n  public ddDroppable?: DDDroppable;\r\n  public ddResizable?: DDResizable;\r\n\r\n  constructor(el: DDElementHost) {\r\n    this.el = el;\r\n  }\r\n\r\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\r\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\r\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\r\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\r\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\r\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\r\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public off(eventName: string): DDElement {\r\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\r\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\r\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\r\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\r\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\r\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\r\n    if (!this.ddDraggable) {\r\n      this.ddDraggable = new DDDraggable(this.el, opts);\r\n    } else {\r\n      this.ddDraggable.updateOption(opts);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public cleanDraggable(): DDElement {\r\n    if (this.ddDraggable) {\r\n      this.ddDraggable.destroy();\r\n      delete this.ddDraggable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public setupResizable(opts: DDResizableOpt): DDElement {\r\n    if (!this.ddResizable) {\r\n      this.ddResizable = new DDResizable(this.el, opts);\r\n    } else {\r\n      this.ddResizable.updateOption(opts);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public cleanResizable(): DDElement {\r\n    if (this.ddResizable) {\r\n      this.ddResizable.destroy();\r\n      delete this.ddResizable;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\r\n    if (!this.ddDroppable) {\r\n      this.ddDroppable = new DDDroppable(this.el, opts);\r\n    } else {\r\n      this.ddDroppable.updateOption(opts);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public cleanDroppable(): DDElement {\r\n    if (this.ddDroppable) {\r\n      this.ddDroppable.destroy();\r\n      delete this.ddDroppable;\r\n    }\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * dd-gridstack.ts 7.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n","/**\r\n * dd-manager.ts 7.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { DDDraggable } from './dd-draggable';\r\nimport { DDDroppable } from './dd-droppable';\r\nimport { DDResizable } from './dd-resizable';\r\n\r\n/**\r\n * globals that are shared across Drag & Drop instances\r\n */\r\nexport class DDManager {\r\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\r\n  public static pauseDrag: boolean | number;\r\n\r\n  /** true if a mouse down event was handled */\r\n  public static mouseHandled: boolean;\r\n\r\n  /** item being dragged */\r\n  public static dragElement: DDDraggable;\r\n\r\n  /** item we are currently over as drop target */\r\n  public static dropElement: DDDroppable;\r\n\r\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\r\n  public static overResizeElement: DDResizable;\r\n\r\n}\r\n","/**\r\n * dd-resizable-handle.ts 7.3.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\r\n\r\nexport interface DDResizableHandleOpt {\r\n  start?: (event) => void;\r\n  move?: (event) => void;\r\n  stop?: (event) => void;\r\n}\r\n\r\nexport class DDResizableHandle {\r\n  /** @internal */\r\n  protected el: HTMLElement;\r\n  /** @internal */\r\n  protected host: HTMLElement;\r\n  /** @internal */\r\n  protected option: DDResizableHandleOpt;\r\n  /** @internal */\r\n  protected dir: string;\r\n  /** @internal true after we've moved enough pixels to start a resize */\r\n  protected moving = false;\r\n  /** @internal */\r\n  protected mouseDownEvent: MouseEvent;\r\n  /** @internal */\r\n  protected static prefix = 'ui-resizable-';\r\n\r\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\r\n    this.host = host;\r\n    this.dir = direction;\r\n    this.option = option;\r\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n    this._mouseDown = this._mouseDown.bind(this);\r\n    this._mouseMove = this._mouseMove.bind(this);\r\n    this._mouseUp = this._mouseUp.bind(this);\r\n\r\n    this._init();\r\n  }\r\n\r\n  /** @internal */\r\n  protected _init(): DDResizableHandle {\r\n    const el = document.createElement('div');\r\n    el.classList.add('ui-resizable-handle');\r\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\r\n    el.style.zIndex = '100';\r\n    el.style.userSelect = 'none';\r\n    this.el = el;\r\n    this.host.appendChild(this.el);\r\n    this.el.addEventListener('mousedown', this._mouseDown);\r\n    if (isTouch) {\r\n      this.el.addEventListener('touchstart', touchstart);\r\n      this.el.addEventListener('pointerdown', pointerdown);\r\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** call this when resize handle needs to be removed and cleaned up */\r\n  public destroy(): DDResizableHandle {\r\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\r\n    this.el.removeEventListener('mousedown', this._mouseDown);\r\n    if (isTouch) {\r\n      this.el.removeEventListener('touchstart', touchstart);\r\n      this.el.removeEventListener('pointerdown', pointerdown);\r\n    }\r\n    this.host.removeChild(this.el);\r\n    delete this.el;\r\n    delete this.host;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\r\n  protected _mouseDown(e: MouseEvent): void {\r\n    this.mouseDownEvent = e;\r\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\r\n    document.addEventListener('mouseup', this._mouseUp, true);\r\n    if (isTouch) {\r\n      this.el.addEventListener('touchmove', touchmove);\r\n      this.el.addEventListener('touchend', touchend);\r\n    }\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  /** @internal */\r\n  protected _mouseMove(e: MouseEvent): void {\r\n    let s = this.mouseDownEvent;\r\n    if (this.moving) {\r\n      this._triggerEvent('move', e);\r\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\r\n      // don't start unless we've moved at least 3 pixels\r\n      this.moving = true;\r\n      this._triggerEvent('start', this.mouseDownEvent);\r\n      this._triggerEvent('move', e);\r\n    }\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  /** @internal */\r\n  protected _mouseUp(e: MouseEvent): void {\r\n    if (this.moving) {\r\n      this._triggerEvent('stop', e);\r\n    }\r\n    document.removeEventListener('mousemove', this._mouseMove, true);\r\n    document.removeEventListener('mouseup', this._mouseUp, true);\r\n    if (isTouch) {\r\n      this.el.removeEventListener('touchmove', touchmove);\r\n      this.el.removeEventListener('touchend', touchend);\r\n    }\r\n    delete this.moving;\r\n    delete this.mouseDownEvent;\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\r\n    if (this.option[name]) this.option[name](event);\r\n    return this;\r\n  }\r\n}\r\n","/**\r\n * dd-resizable.ts 7.3.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { DDResizableHandle } from './dd-resizable-handle';\r\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\r\nimport { Utils } from './utils';\r\nimport { DDUIData, Rect, Size } from './types';\r\nimport { DDManager } from './dd-manager';\r\n\r\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\r\n\r\n// TODO: merge with DDDragOpt\r\nexport interface DDResizableOpt {\r\n  autoHide?: boolean;\r\n  handles?: string;\r\n  maxHeight?: number;\r\n  maxWidth?: number;\r\n  minHeight?: number;\r\n  minWidth?: number;\r\n  start?: (event: Event, ui: DDUIData) => void;\r\n  stop?: (event: Event) => void;\r\n  resize?: (event: Event, ui: DDUIData) => void;\r\n}\r\n\r\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\r\n\r\n  // have to be public else complains for HTMLElementExtendOpt ?\r\n  public el: HTMLElement;\r\n  public option: DDResizableOpt;\r\n\r\n  /** @internal */\r\n  protected handlers: DDResizableHandle[];\r\n  /** @internal */\r\n  protected originalRect: Rect;\r\n  /** @internal */\r\n  protected temporalRect: Rect;\r\n  /** @internal */\r\n  protected scrollY: number;\r\n  /** @internal */\r\n  protected scrolled: number;\r\n  /** @internal */\r\n  protected scrollEl: HTMLElement;\r\n  /** @internal */\r\n  protected startEvent: MouseEvent;\r\n  /** @internal value saved in the same order as _originStyleProp[] */\r\n  protected elOriginStyleVal: string[];\r\n  /** @internal */\r\n  protected parentOriginStylePosition: string;\r\n  /** @internal */\r\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\r\n\r\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\r\n    super();\r\n    this.el = el;\r\n    this.option = opts;\r\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\r\n    this._mouseOver = this._mouseOver.bind(this);\r\n    this._mouseOut = this._mouseOut.bind(this);\r\n    this.enable();\r\n    this._setupAutoHide(this.option.autoHide);\r\n    this._setupHandlers();\r\n  }\r\n\r\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\r\n    super.on(event, callback);\r\n  }\r\n\r\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\r\n    super.off(event);\r\n  }\r\n\r\n  public enable(): void {\r\n    super.enable();\r\n    this.el.classList.add('ui-resizable');\r\n    this.el.classList.remove('ui-resizable-disabled');\r\n    this._setupAutoHide(this.option.autoHide);\r\n  }\r\n\r\n  public disable(): void {\r\n    super.disable();\r\n    this.el.classList.add('ui-resizable-disabled');\r\n    this.el.classList.remove('ui-resizable');\r\n    this._setupAutoHide(false);\r\n  }\r\n\r\n  public destroy(): void {\r\n    this._removeHandlers();\r\n    this._setupAutoHide(false);\r\n    this.el.classList.remove('ui-resizable');\r\n    delete this.el;\r\n    super.destroy();\r\n  }\r\n\r\n  public updateOption(opts: DDResizableOpt): DDResizable {\r\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\r\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\r\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\r\n    if (updateHandles) {\r\n      this._removeHandlers();\r\n      this._setupHandlers();\r\n    }\r\n    if (updateAutoHide) {\r\n      this._setupAutoHide(this.option.autoHide);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal turns auto hide on/off */\r\n  protected _setupAutoHide(auto: boolean): DDResizable {\r\n    if (auto) {\r\n      this.el.classList.add('ui-resizable-autohide');\r\n      // use mouseover and not mouseenter to get better performance and track for nested cases\r\n      this.el.addEventListener('mouseover', this._mouseOver);\r\n      this.el.addEventListener('mouseout', this._mouseOut);\r\n    } else {\r\n      this.el.classList.remove('ui-resizable-autohide');\r\n      this.el.removeEventListener('mouseover', this._mouseOver);\r\n      this.el.removeEventListener('mouseout', this._mouseOut);\r\n      if (DDManager.overResizeElement === this) {\r\n        delete DDManager.overResizeElement;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  protected _mouseOver(e: Event): void {\r\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\r\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\r\n    DDManager.overResizeElement = this;\r\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n    this.el.classList.remove('ui-resizable-autohide');\r\n  }\r\n\r\n  /** @internal */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  protected _mouseOut(e: Event): void {\r\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n    if (DDManager.overResizeElement !== this) return;\r\n    delete DDManager.overResizeElement;\r\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\r\n    this.el.classList.add('ui-resizable-autohide');\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setupHandlers(): DDResizable {\r\n    let handlerDirection = this.option.handles || 'e,s,se';\r\n    if (handlerDirection === 'all') {\r\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\r\n    }\r\n    this.handlers = handlerDirection.split(',')\r\n      .map(dir => dir.trim())\r\n      .map(dir => new DDResizableHandle(this.el, dir, {\r\n        start: (event: MouseEvent) => {\r\n          this._resizeStart(event);\r\n        },\r\n        stop: (event: MouseEvent) => {\r\n          this._resizeStop(event);\r\n        },\r\n        move: (event: MouseEvent) => {\r\n          this._resizing(event, dir);\r\n        }\r\n      }));\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _resizeStart(event: MouseEvent): DDResizable {\r\n    this.originalRect = this.el.getBoundingClientRect();\r\n    this.scrollEl = Utils.getScrollElement(this.el);\r\n    this.scrollY = this.scrollEl.scrollTop;\r\n    this.scrolled = 0;\r\n    this.startEvent = event;\r\n    this._setupHelper();\r\n    this._applyChange();\r\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\r\n    if (this.option.start) {\r\n      this.option.start(ev, this._ui());\r\n    }\r\n    this.el.classList.add('ui-resizable-resizing');\r\n    this.triggerEvent('resizestart', ev);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\r\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\r\n    this.temporalRect = this._getChange(event, dir);\r\n    this._applyChange();\r\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\r\n    if (this.option.resize) {\r\n      this.option.resize(ev, this._ui());\r\n    }\r\n    this.triggerEvent('resize', ev);\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _resizeStop(event: MouseEvent): DDResizable {\r\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\r\n    if (this.option.stop) {\r\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\r\n    }\r\n    this.el.classList.remove('ui-resizable-resizing');\r\n    this.triggerEvent('resizestop', ev);\r\n    this._cleanHelper();\r\n    delete this.startEvent;\r\n    delete this.originalRect;\r\n    delete this.temporalRect;\r\n    delete this.scrollY;\r\n    delete this.scrolled;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setupHelper(): DDResizable {\r\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\r\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\r\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\r\n      this.el.parentElement.style.position = 'relative';\r\n    }\r\n    this.el.style.position = 'absolute';\r\n    this.el.style.opacity = '0.8';\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _cleanHelper(): DDResizable {\r\n    DDResizable._originStyleProp.forEach((prop, i) => {\r\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\r\n    });\r\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _getChange(event: MouseEvent, dir: string): Rect {\r\n    const oEvent = this.startEvent;\r\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\r\n      width: this.originalRect.width,\r\n      height: this.originalRect.height + this.scrolled,\r\n      left: this.originalRect.left,\r\n      top: this.originalRect.top - this.scrolled\r\n    };\r\n\r\n    const offsetX = event.clientX - oEvent.clientX;\r\n    const offsetY = event.clientY - oEvent.clientY;\r\n\r\n    if (dir.indexOf('e') > -1) {\r\n      newRect.width += offsetX;\r\n    } else if (dir.indexOf('w') > -1) {\r\n      newRect.width -= offsetX;\r\n      newRect.left += offsetX;\r\n    }\r\n    if (dir.indexOf('s') > -1) {\r\n      newRect.height += offsetY;\r\n    } else if (dir.indexOf('n') > -1) {\r\n      newRect.height -= offsetY;\r\n      newRect.top += offsetY\r\n    }\r\n    const constrain = this._constrainSize(newRect.width, newRect.height);\r\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\r\n      if (dir.indexOf('w') > -1) {\r\n        newRect.left += newRect.width - constrain.width;\r\n      }\r\n      newRect.width = constrain.width;\r\n    }\r\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\r\n      if (dir.indexOf('n') > -1) {\r\n        newRect.top += newRect.height - constrain.height;\r\n      }\r\n      newRect.height = constrain.height;\r\n    }\r\n    return newRect;\r\n  }\r\n\r\n  /** @internal constrain the size to the set min/max values */\r\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\r\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\r\n    const minWidth = this.option.minWidth || oWidth;\r\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\r\n    const minHeight = this.option.minHeight || oHeight;\r\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\r\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\r\n    return { width, height };\r\n  }\r\n\r\n  /** @internal */\r\n  protected _applyChange(): DDResizable {\r\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\r\n    if (this.el.style.position === 'absolute') {\r\n      const containmentEl = this.el.parentElement;\r\n      const { left, top } = containmentEl.getBoundingClientRect();\r\n      containmentRect = { left, top, width: 0, height: 0 };\r\n    }\r\n    if (!this.temporalRect) return this;\r\n    Object.keys(this.temporalRect).forEach(key => {\r\n      const value = this.temporalRect[key];\r\n      this.el.style[key] = value - containmentRect[key] + 'px';\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _removeHandlers(): DDResizable {\r\n    this.handlers.forEach(handle => handle.destroy());\r\n    delete this.handlers;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _ui = (): DDUIData => {\r\n    const containmentEl = this.el.parentElement;\r\n    const containmentRect = containmentEl.getBoundingClientRect();\r\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\r\n      width: this.originalRect.width,\r\n      height: this.originalRect.height + this.scrolled,\r\n      left: this.originalRect.left,\r\n      top: this.originalRect.top - this.scrolled\r\n    };\r\n    const rect = this.temporalRect || newRect;\r\n    return {\r\n      position: {\r\n        left: rect.left - containmentRect.left,\r\n        top: rect.top - containmentRect.top\r\n      },\r\n      size: {\r\n        width: rect.width,\r\n        height: rect.height\r\n      }\r\n      /* Gridstack ONLY needs position set above... keep around in case.\r\n      element: [this.el], // The object representing the element to be resized\r\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\r\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\r\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\r\n        left: this.originalRect.left - containmentRect.left,\r\n        top: this.originalRect.top - containmentRect.top\r\n      },\r\n      originalSize: { // The size represented as { width, height } before the resizable is resized\r\n        width: this.originalRect.width,\r\n        height: this.originalRect.height\r\n      }\r\n      */\r\n    };\r\n  }\r\n}\r\n","/**\r\n * touch.ts 7.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { DDManager } from './dd-manager';\r\n\r\n/**\r\n * Detect touch support - Windows Surface devices and other touch devices\r\n * should we use this instead ? (what we had for always showing resize handles)\r\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\r\n */\r\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\r\n( 'ontouchstart' in document\r\n  || 'ontouchstart' in window\r\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\r\n  || navigator.maxTouchPoints > 0\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  || (navigator as any).msMaxTouchPoints > 0\r\n);\r\n\r\n// interface TouchCoord {x: number, y: number};\r\n\r\nclass DDTouch {\r\n  public static touchHandled: boolean;\r\n  public static pointerLeaveTimeout: number;\r\n}\r\n\r\n/**\r\n* Get the x,y position of a touch event\r\n*/\r\n// function getTouchCoords(e: TouchEvent): TouchCoord {\r\n//   return {\r\n//     x: e.changedTouches[0].pageX,\r\n//     y: e.changedTouches[0].pageY\r\n//   };\r\n// }\r\n\r\n/**\r\n * Simulate a mouse event based on a corresponding touch event\r\n * @param {Object} e A touch event\r\n * @param {String} simulatedType The corresponding mouse event\r\n */\r\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\r\n\r\n  // Ignore multi-touch events\r\n  if (e.touches.length > 1) return;\r\n\r\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\r\n  if (e.cancelable) e.preventDefault();\r\n\r\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\r\n\r\n  // Initialize the simulated mouse event using the touch event's coordinates\r\n  simulatedEvent.initMouseEvent(\r\n    simulatedType,    // type\r\n    true,             // bubbles\r\n    true,             // cancelable\r\n    window,           // view\r\n    1,                // detail\r\n    touch.screenX,    // screenX\r\n    touch.screenY,    // screenY\r\n    touch.clientX,    // clientX\r\n    touch.clientY,    // clientY\r\n    false,            // ctrlKey\r\n    false,            // altKey\r\n    false,            // shiftKey\r\n    false,            // metaKey\r\n    0,                // button\r\n    null              // relatedTarget\r\n  );\r\n\r\n  // Dispatch the simulated event to the target element\r\n  e.target.dispatchEvent(simulatedEvent);\r\n}\r\n\r\n/**\r\n * Simulate a mouse event based on a corresponding Pointer event\r\n * @param {Object} e A pointer event\r\n * @param {String} simulatedType The corresponding mouse event\r\n */\r\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\r\n\r\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\r\n  if (e.cancelable) e.preventDefault();\r\n\r\n  const simulatedEvent = document.createEvent('MouseEvents');\r\n\r\n  // Initialize the simulated mouse event using the touch event's coordinates\r\n  simulatedEvent.initMouseEvent(\r\n    simulatedType,    // type\r\n    true,             // bubbles\r\n    true,             // cancelable\r\n    window,           // view\r\n    1,                // detail\r\n    e.screenX,    // screenX\r\n    e.screenY,    // screenY\r\n    e.clientX,    // clientX\r\n    e.clientY,    // clientY\r\n    false,            // ctrlKey\r\n    false,            // altKey\r\n    false,            // shiftKey\r\n    false,            // metaKey\r\n    0,                // button\r\n    null              // relatedTarget\r\n  );\r\n\r\n  // Dispatch the simulated event to the target element\r\n  e.target.dispatchEvent(simulatedEvent);\r\n}\r\n\r\n\r\n/**\r\n * Handle the touchstart events\r\n * @param {Object} e The widget element's touchstart event\r\n */\r\nexport function touchstart(e: TouchEvent): void {\r\n  // Ignore the event if another widget is already being handled\r\n  if (DDTouch.touchHandled) return;\r\n  DDTouch.touchHandled = true;\r\n\r\n  // Simulate the mouse events\r\n  // simulateMouseEvent(e, 'mouseover');\r\n  // simulateMouseEvent(e, 'mousemove');\r\n  simulateMouseEvent(e, 'mousedown');\r\n}\r\n\r\n/**\r\n * Handle the touchmove events\r\n * @param {Object} e The document's touchmove event\r\n */\r\nexport function touchmove(e: TouchEvent): void {\r\n  // Ignore event if not handled by us\r\n  if (!DDTouch.touchHandled) return;\r\n\r\n  simulateMouseEvent(e, 'mousemove');\r\n}\r\n\r\n/**\r\n * Handle the touchend events\r\n * @param {Object} e The document's touchend event\r\n */\r\nexport function touchend(e: TouchEvent): void {\r\n\r\n  // Ignore event if not handled\r\n  if (!DDTouch.touchHandled) return;\r\n\r\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\r\n  if (DDTouch.pointerLeaveTimeout) {\r\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\r\n    delete DDTouch.pointerLeaveTimeout;\r\n  }\r\n\r\n  const wasDragging = !!DDManager.dragElement;\r\n\r\n  // Simulate the mouseup event\r\n  simulateMouseEvent(e, 'mouseup');\r\n  // simulateMouseEvent(event, 'mouseout');\r\n\r\n  // If the touch interaction did not move, it should trigger a click\r\n  if (!wasDragging) {\r\n    simulateMouseEvent(e, 'click');\r\n  }\r\n\r\n  // Unset the flag to allow other widgets to inherit the touch event\r\n  DDTouch.touchHandled = false;\r\n}\r\n\r\n/**\r\n * Note we don't get touchenter/touchleave (which are deprecated)\r\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\r\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\r\n */\r\nexport function pointerdown(e: PointerEvent): void {\r\n  // console.log(\"pointer down\")\r\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\r\n}\r\n\r\nexport function pointerenter(e: PointerEvent): void {\r\n  // ignore the initial one we get on pointerdown on ourself\r\n  if (!DDManager.dragElement) {\r\n    // console.log('pointerenter ignored');\r\n    return;\r\n  }\r\n  // console.log('pointerenter');\r\n  simulatePointerMouseEvent(e, 'mouseenter');\r\n}\r\n\r\nexport function pointerleave(e: PointerEvent): void {\r\n  // ignore the leave on ourself we get before releasing the mouse over ourself\r\n  // by delaying sending the event and having the up event cancel us\r\n  if (!DDManager.dragElement) {\r\n    // console.log('pointerleave ignored');\r\n    return;\r\n  }\r\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\r\n    delete DDTouch.pointerLeaveTimeout;\r\n    // console.log('pointerleave delayed');\r\n    simulatePointerMouseEvent(e, 'mouseleave');\r\n  }, 10);\r\n}\r\n\r\n","/**\r\n * gridstack-engine.ts 7.3.0\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { Utils } from './utils';\r\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\r\n\r\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\r\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\r\n\r\n/** options used during creation - similar to GridStackOptions */\r\nexport interface GridStackEngineOptions {\r\n  column?: number;\r\n  maxRow?: number;\r\n  float?: boolean;\r\n  nodes?: GridStackNode[];\r\n  onChange?: OnChangeCB;\r\n}\r\n\r\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\r\nexport class GridStackEngine {\r\n  public column: number;\r\n  public maxRow: number;\r\n  public nodes: GridStackNode[];\r\n  public addedNodes: GridStackNode[] = [];\r\n  public removedNodes: GridStackNode[] = [];\r\n  public batchMode: boolean;\r\n  /** @internal callback to update the DOM attributes */\r\n  protected onChange: OnChangeCB;\r\n  /** @internal */\r\n  protected _float: boolean;\r\n  /** @internal */\r\n  protected _prevFloat: boolean;\r\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\r\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\r\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\r\n  protected _inColumnResize: boolean;\r\n  /** @internal true if we have some items locked */\r\n  protected _hasLocked: boolean;\r\n  /** @internal unique global internal _id counter NOT starting at 0 */\r\n  public static _idSeq = 1;\r\n\r\n  public constructor(opts: GridStackEngineOptions = {}) {\r\n    this.column = opts.column || 12;\r\n    this.maxRow = opts.maxRow;\r\n    this._float = opts.float;\r\n    this.nodes = opts.nodes || [];\r\n    this.onChange = opts.onChange;\r\n  }\r\n\r\n  public batchUpdate(flag = true): GridStackEngine {\r\n    if (!!this.batchMode === flag) return this;\r\n    this.batchMode = flag;\r\n    if (flag) {\r\n      this._prevFloat = this._float;\r\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\r\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\r\n    } else {\r\n      this._float = this._prevFloat;\r\n      delete this._prevFloat;\r\n      this._packNodes()._notify();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\r\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\r\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\r\n  }\r\n\r\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n   * return true if we moved. */\r\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\r\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\r\n\r\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\r\n    if (!collide) return false;\r\n\r\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\r\n    if (node._moving && !opt.nested && !this.float) {\r\n      if (this.swap(node, collide)) return true;\r\n    }\r\n\r\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\r\n    let area = nn;\r\n    if (this._useEntireRowArea(node, nn)) {\r\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\r\n      collide = this.collide(node, area, opt.skip); // force new hit\r\n    }\r\n\r\n    let didMove = false;\r\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\r\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\r\n      let moved: boolean;\r\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\r\n      // but remember that skip down so we only do this once (and push others otherwise).\r\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\r\n        // can take space we had, or before where we're going\r\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\r\n        node._skipDown = (node._skipDown || nn.y > node.y);\r\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\r\n        if (collide.locked && moved) {\r\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\r\n        } else if (!collide.locked && moved && opt.pack) {\r\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\r\n          this._packNodes();\r\n          nn.y = collide.y + collide.h;\r\n          Utils.copyPos(node, nn);\r\n        }\r\n        didMove = didMove || moved;\r\n      } else {\r\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\r\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\r\n      }\r\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\r\n      collide = undefined;\r\n    }\r\n    return didMove;\r\n  }\r\n\r\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\r\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\r\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\r\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\r\n  }\r\n\r\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\r\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\r\n    if (!o.rect || !node._rect) return;\r\n    let r0 = node._rect; // where started\r\n    let r = {...o.rect}; // where we are\r\n\r\n    // update dragged rect to show where it's coming from (above or below, etc...)\r\n    if (r.y > r0.y) {\r\n      r.h += r.y - r0.y;\r\n      r.y = r0.y;\r\n    } else {\r\n      r.h += r0.y - r.y;\r\n    }\r\n    if (r.x > r0.x) {\r\n      r.w += r.x - r0.x;\r\n      r.x = r0.x;\r\n    } else {\r\n      r.w += r0.x - r.x;\r\n    }\r\n\r\n    let collide: GridStackNode;\r\n    collides.forEach(n => {\r\n      if (n.locked || !n._rect) return;\r\n      let r2 = n._rect; // overlapping target\r\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\r\n      // depending on which side we started from, compute the overlap % of coverage\r\n      // (ex: from above/below we only compute the max horizontal line coverage)\r\n      if (r0.y < r2.y) { // from above\r\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\r\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\r\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\r\n      }\r\n      if (r0.x < r2.x) { // from the left\r\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\r\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\r\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\r\n      }\r\n      let over = Math.min(xOver, yOver);\r\n      if (over > overMax) {\r\n        overMax = over;\r\n        collide = n;\r\n      }\r\n    });\r\n    o.collide = collide; // save it so we don't have to find it again\r\n    return collide;\r\n  }\r\n\r\n  /** does a pixel coverage returning the node that has the most coverage by area */\r\n  /*\r\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\r\n    let collide: GridStackNode;\r\n    let overMax = 0;\r\n    collides.forEach(n => {\r\n      if (n.locked || !n._rect) return;\r\n      let over = Utils.areaIntercept(r, n._rect);\r\n      if (over > overMax) {\r\n        overMax = over;\r\n        collide = n;\r\n      }\r\n    });\r\n    return {collide, over: overMax};\r\n  }\r\n  */\r\n\r\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\r\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\r\n  {\r\n    this.nodes.forEach(n =>\r\n      n._rect = {\r\n        y: n.y * h + top,\r\n        x: n.x * w + left,\r\n        w: n.w * w - left - right,\r\n        h: n.h * h - top - bottom\r\n      }\r\n    );\r\n    return this;\r\n  }\r\n\r\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\r\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\r\n    if (!b || b.locked || !a || a.locked) return false;\r\n\r\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\r\n      let x = b.x, y = b.y;\r\n      b.x = a.x; b.y = a.y; // b -> a position\r\n      if (a.h != b.h) {\r\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\r\n      } else if (a.w != b.w) {\r\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\r\n      } else {\r\n        a.x = x; a.y = y; // a -> old b position\r\n      }\r\n      a._dirty = b._dirty = true;\r\n      return true;\r\n    }\r\n    let touching: boolean; // remember if we called it (vs undefined)\r\n\r\n    // same size and same row or column, and touching\r\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\r\n      return _doSwap();\r\n    if (touching === false) return; // IFF ran test and fail, bail out\r\n\r\n    // check for taking same columns (but different height) and touching\r\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\r\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\r\n      return _doSwap();\r\n    }\r\n    if (touching === false) return;\r\n\r\n    // check if taking same row (but different width) and touching\r\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\r\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\r\n      return _doSwap();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\r\n    return !this.collide(nn);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStackEngine {\r\n    if (this.nodes.length === 0) return this;\r\n    this.batchUpdate()\r\n      .sortNodes();\r\n    let copyNodes = this.nodes;\r\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\r\n    copyNodes.forEach(node => {\r\n      if (!node.locked) {\r\n        node.autoPosition = true;\r\n      }\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      node._dirty = true; // will force attr update\r\n    });\r\n    return this.batchUpdate(false);\r\n  }\r\n\r\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\r\n  public set float(val: boolean) {\r\n    if (this._float === val) return;\r\n    this._float = val || false;\r\n    if (!val) {\r\n      this._packNodes()._notify();\r\n    }\r\n  }\r\n\r\n  /** float getter method */\r\n  public get float(): boolean { return this._float || false; }\r\n\r\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\r\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\r\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\r\n  protected _packNodes(): GridStackEngine {\r\n    if (this.batchMode) { return this; }\r\n    this.sortNodes(); // first to last\r\n\r\n    if (this.float) {\r\n      // restore original Y pos\r\n      this.nodes.forEach(n => {\r\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\r\n        let newY = n.y;\r\n        while (newY > n._orig.y) {\r\n          --newY;\r\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!collide) {\r\n            n._dirty = true;\r\n            n.y = newY;\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // top gravity pack\r\n      this.nodes.forEach((n, i) => {\r\n        if (n.locked) return;\r\n        while (n.y > 0) {\r\n          let newY = i === 0 ? 0 : n.y - 1;\r\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\r\n          if (!canBeMoved) break;\r\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\r\n          // and move items back. The user 'change' CB should detect changes from the original\r\n          // starting position instead.\r\n          n._dirty = (n.y !== newY);\r\n          n.y = newY;\r\n        }\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\r\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n    node = node || {};\r\n    node._id = node._id || GridStackEngine._idSeq++;\r\n\r\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\r\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\r\n      node.autoPosition = true;\r\n    }\r\n\r\n    // assign defaults for missing required fields\r\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\r\n    Utils.defaults(node, defaults);\r\n\r\n    if (!node.autoPosition) { delete node.autoPosition; }\r\n    if (!node.noResize) { delete node.noResize; }\r\n    if (!node.noMove) { delete node.noMove; }\r\n\r\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\r\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\r\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\r\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\r\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\r\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\r\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\r\n    if (isNaN(node.w))  { node.w = defaults.w; }\r\n    if (isNaN(node.h)) { node.h = defaults.h; }\r\n\r\n    return this.nodeBoundFix(node, resizing);\r\n  }\r\n\r\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\r\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\r\n\r\n    let before = node._orig || Utils.copyPos({}, node);\r\n\r\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\r\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\r\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\r\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\r\n\r\n    // if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),\r\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\r\n    // IFF we're not in the middle of column resizing!\r\n    const saveOrig = this.column === 1 || node.x + node.w > this.column;\r\n    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\r\n      let copy = {...node}; // need _id + positions\r\n      if (copy.autoPosition) { delete copy.x; delete copy.y; }\r\n      else copy.x = Math.min(11, copy.x);\r\n      copy.w = Math.min(12, copy.w);\r\n      this.cacheOneLayout(copy, 12);\r\n    }\r\n\r\n    if (node.w > this.column) {\r\n      node.w = this.column;\r\n    } else if (node.w < 1) {\r\n      node.w = 1;\r\n    }\r\n\r\n    if (this.maxRow && node.h > this.maxRow) {\r\n      node.h = this.maxRow;\r\n    } else if (node.h < 1) {\r\n      node.h = 1;\r\n    }\r\n\r\n    if (node.x < 0) {\r\n      node.x = 0;\r\n    }\r\n    if (node.y < 0) {\r\n      node.y = 0;\r\n    }\r\n\r\n    if (node.x + node.w > this.column) {\r\n      if (resizing) {\r\n        node.w = this.column - node.x;\r\n      } else {\r\n        node.x = this.column - node.w;\r\n      }\r\n    }\r\n    if (this.maxRow && node.y + node.h > this.maxRow) {\r\n      if (resizing) {\r\n        node.h = this.maxRow - node.y;\r\n      } else {\r\n        node.y = this.maxRow - node.h;\r\n      }\r\n    }\r\n\r\n    if (!Utils.samePos(node, before)) {\r\n      node._dirty = true;\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** returns a list of modified nodes from their original values */\r\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\r\n    // compare original x,y,w,h instead as _dirty can be a temporary state\r\n    if (verify) {\r\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\r\n    }\r\n    return this.nodes.filter(n => n._dirty);\r\n  }\r\n\r\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\r\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\r\n    if (this.batchMode || !this.onChange) return this;\r\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\r\n    this.onChange(dirtyNodes);\r\n    return this;\r\n  }\r\n\r\n  /** @internal remove dirty and last tried info */\r\n  public cleanNodes(): GridStackEngine {\r\n    if (this.batchMode) return this;\r\n    this.nodes.forEach(n => {\r\n      delete n._dirty;\r\n      delete n._lastTried;\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to save initial position/size to track real dirty state.\r\n   * Note: should be called right after we call change event (so next API is can detect changes)\r\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\r\n  public saveInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      n._orig = Utils.copyPos({}, n);\r\n      delete n._dirty;\r\n    });\r\n    this._hasLocked = this.nodes.some(n => n.locked);\r\n    return this;\r\n  }\r\n\r\n  /** @internal restore all the nodes back to initial values (called when we leave) */\r\n  public restoreInitial(): GridStackEngine {\r\n    this.nodes.forEach(n => {\r\n      if (Utils.samePos(n, n._orig)) return;\r\n      Utils.copyPos(n, n._orig);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return this;\r\n  }\r\n\r\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\r\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\r\n   */\r\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column): boolean {\r\n    nodeList = Utils.sort(nodeList, -1, column);\r\n    let found = false;\r\n    for (let i = 0; !found; ++i) {\r\n      let x = i % column;\r\n      let y = Math.floor(i / column);\r\n      if (x + node.w > column) {\r\n        continue;\r\n      }\r\n      let box = {x, y, w: node.w, h: node.h};\r\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\r\n        node.x = x;\r\n        node.y = y;\r\n        delete node.autoPosition;\r\n        found = true;\r\n      }\r\n    }\r\n    return found;\r\n  }\r\n\r\n  /** call to add the given node to our list, fixing collision and re-packing */\r\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\r\n    let dup = this.nodes.find(n => n._id === node._id);\r\n    if (dup) return dup; // prevent inserting twice! return it instead.\r\n\r\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\r\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\r\n    delete node._temporaryRemoved;\r\n    delete node._removeDOM;\r\n\r\n    if (node.autoPosition && this.findEmptyPosition(node)) {\r\n      delete node.autoPosition; // found our slot\r\n    }\r\n\r\n    this.nodes.push(node);\r\n    if (triggerAddEvent) { this.addedNodes.push(node); }\r\n\r\n    this._fixCollisions(node);\r\n    if (!this.batchMode) { this._packNodes()._notify(); }\r\n    return node;\r\n  }\r\n\r\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\r\n    if (!this.nodes.find(n => n === node)) {\r\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\r\n      return this;\r\n    }\r\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\r\n      this.removedNodes.push(node);\r\n    }\r\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\r\n    this.nodes = this.nodes.filter(n => n !== node);\r\n    return this._packNodes()\r\n      ._notify([node]);\r\n  }\r\n\r\n  public removeAll(removeDOM = true): GridStackEngine {\r\n    delete this._layouts;\r\n    if (this.nodes.length === 0) return this;\r\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\r\n    this.removedNodes = this.nodes;\r\n    this.nodes = [];\r\n    return this._notify(this.removedNodes);\r\n  }\r\n\r\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n   * others in a clone first, then apply those changes if still within specs. */\r\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    // if (node.locked) return false;\r\n    if (!this.changedPosConstrain(node, o)) return false;\r\n    o.pack = true;\r\n\r\n    // simpler case: move item directly...\r\n    if (!this.maxRow) {\r\n      return this.moveNode(node, o);\r\n    }\r\n\r\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\r\n    let clonedNode: GridStackNode;\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {\r\n        if (n === node) {\r\n          clonedNode = {...n};\r\n          return clonedNode;\r\n        }\r\n        return {...n};\r\n      })\r\n    });\r\n    if (!clonedNode) return false;\r\n\r\n    // check if we're covering 50% collision and could move\r\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\r\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\r\n    if (!canMove && !o.resizing && o.collide) {\r\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\r\n      if (this.swap(node, collide)) { // swaps and mark dirty\r\n        this._notify();\r\n        return true;\r\n      }\r\n    }\r\n    if (!canMove) return false;\r\n\r\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\r\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\r\n    clone.nodes.filter(n => n._dirty).forEach(c => {\r\n      let n = this.nodes.find(a => a._id === c._id);\r\n      if (!n) return;\r\n      Utils.copyPos(n, c);\r\n      n._dirty = true;\r\n    });\r\n    this._notify();\r\n    return true;\r\n  }\r\n\r\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\r\n  public willItFit(node: GridStackNode): boolean {\r\n    delete node._willFitPos;\r\n    if (!this.maxRow) return true;\r\n    // create a clone with NO maxRow and check if still within size\r\n    let clone = new GridStackEngine({\r\n      column: this.column,\r\n      float: this.float,\r\n      nodes: this.nodes.map(n => {return {...n}})\r\n    });\r\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\r\n    this.cleanupNode(n);\r\n    delete n.el; delete n._id; delete n.content; delete n.grid;\r\n    clone.addNode(n);\r\n    if (clone.getRow() <= this.maxRow) {\r\n      node._willFitPos = Utils.copyPos({}, n);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** true if x,y or w,h are different after clamping to min/max */\r\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\r\n    // first make sure w,h are set for caller\r\n    p.w = p.w || node.w;\r\n    p.h = p.h || node.h;\r\n    if (node.x !== p.x || node.y !== p.y) return true;\r\n    // check constrained w,h\r\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\r\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\r\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\r\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\r\n    return (node.w !== p.w || node.h !== p.h);\r\n  }\r\n\r\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\r\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\r\n    if (!node || /*node.locked ||*/ !o) return false;\r\n    let wasUndefinedPack: boolean;\r\n    if (o.pack === undefined) {\r\n      wasUndefinedPack = o.pack = true;\r\n    }\r\n\r\n    // constrain the passed in values and check if we're still changing our node\r\n    if (typeof o.x !== 'number') { o.x = node.x; }\r\n    if (typeof o.y !== 'number') { o.y = node.y; }\r\n    if (typeof o.w !== 'number') { o.w = node.w; }\r\n    if (typeof o.h !== 'number') { o.h = node.h; }\r\n    let resizing = (node.w !== o.w || node.h !== o.h);\r\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\r\n    Utils.copyPos(nn, o);\r\n    nn = this.nodeBoundFix(nn, resizing);\r\n    Utils.copyPos(o, nn);\r\n\r\n    if (Utils.samePos(node, o)) return false;\r\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\r\n\r\n    // check if we will need to fix collision at our new location\r\n    let collides = this.collideAll(node, nn, o.skip);\r\n    let needToMove = true;\r\n    if (collides.length) {\r\n      let activeDrag = node._moving && !o.nested;\r\n      // check to make sure we actually collided over 50% surface area while dragging\r\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\r\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\r\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\r\n        let over = Utils.areaIntercept(o.rect, collide._rect);\r\n        let a1 = Utils.area(o.rect);\r\n        let a2 = Utils.area(collide._rect);\r\n        let perc = over / (a1 < a2 ? a1 : a2);\r\n        if (perc > .8) {\r\n          collide.grid.makeSubGrid(collide.el, undefined, node);\r\n          collide = undefined;\r\n        }\r\n      }\r\n\r\n      if (collide) {\r\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\r\n      } else {\r\n        needToMove = false; // we didn't cover >50% for a move, skip...\r\n        if (wasUndefinedPack) delete o.pack;\r\n      }\r\n    }\r\n\r\n    // now move (to the original ask vs the collision version which might differ) and repack things\r\n    if (needToMove) {\r\n      node._dirty = true;\r\n      Utils.copyPos(node, nn);\r\n    }\r\n    if (o.pack) {\r\n      this._packNodes()\r\n        ._notify();\r\n    }\r\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\r\n  }\r\n\r\n  public beginUpdate(node: GridStackNode): GridStackEngine {\r\n    if (!node._updating) {\r\n      node._updating = true;\r\n      delete node._skipDown;\r\n      if (!this.batchMode) this.saveInitial();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public endUpdate(): GridStackEngine {\r\n    let n = this.nodes.find(n => n._updating);\r\n    if (n) {\r\n      delete n._updating;\r\n      delete n._skipDown;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\r\n   * returning a list of widgets for serialization */\r\n  public save(saveElement = true): GridStackNode[] {\r\n    // use the highest layout for any saved info so we can have full detail on reload #1849\r\n    let len = this._layouts?.length;\r\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\r\n    let list: GridStackNode[] = [];\r\n    this.sortNodes();\r\n    this.nodes.forEach(n => {\r\n      let wl = layout?.find(l => l._id === n._id);\r\n      let w: GridStackNode = {...n};\r\n      // use layout info instead if set\r\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\r\n      Utils.removeInternalForSave(w, !saveElement);\r\n      list.push(w);\r\n    });\r\n    return list;\r\n  }\r\n\r\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\r\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\r\n    if (!this._layouts || this._inColumnResize) return this;\r\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\r\n    this._layouts.forEach((layout, column) => {\r\n      if (!layout || column === this.column) return this;\r\n      if (column < this.column) {\r\n        this._layouts[column] = undefined;\r\n      }\r\n      else {\r\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\r\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\r\n        let ratio = column / this.column;\r\n        nodes.forEach(node => {\r\n          if (!node._orig) return; // didn't change (newly added ?)\r\n          let n = layout.find(l => l._id === node._id);\r\n          if (!n) return; // no cache for new nodes. Will use those values.\r\n          // Y changed, push down same amount\r\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\r\n          if (node.y !== node._orig.y) {\r\n            n.y += (node.y - node._orig.y);\r\n          }\r\n          // X changed, scale from new position\r\n          if (node.x !== node._orig.x) {\r\n            n.x = Math.round(node.x * ratio);\r\n          }\r\n          // width changed, scale from new width\r\n          if (node.w !== node._orig.w) {\r\n            n.w = Math.round(node.w * ratio);\r\n          }\r\n          // ...height always carries over from cache\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param prevColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\r\n    if (!this.nodes.length || !column || prevColumn === column) return this;\r\n\r\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\r\n    this.cacheLayout(this.nodes, prevColumn);\r\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\r\n    let newNodes: GridStackNode[] = [];\r\n\r\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\r\n    let domOrder = false;\r\n    if (column === 1 && nodes?.length) {\r\n      domOrder = true;\r\n      let top = 0;\r\n      nodes.forEach(n => {\r\n        n.x = 0;\r\n        n.w = 1;\r\n        n.y = Math.max(n.y, top);\r\n        top = n.y + n.h;\r\n      });\r\n      newNodes = nodes;\r\n      nodes = [];\r\n    } else {\r\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\r\n    }\r\n\r\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\r\n    // generate next size down from where we are (looks more natural as you gradually size down).\r\n    let cacheNodes: GridStackNode[] = [];\r\n    if (column > prevColumn) {\r\n      cacheNodes = this._layouts[column] || [];\r\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\r\n      // by pretending we came from that larger column by assigning those values as starting point\r\n      let lastIndex = this._layouts.length - 1;\r\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\r\n        prevColumn = lastIndex;\r\n        this._layouts[lastIndex].forEach(cacheNode => {\r\n          let n = nodes.find(n => n._id === cacheNode._id);\r\n          if (n) {\r\n            // still current, use cache info positions\r\n            n.x = cacheNode.x;\r\n            n.y = cacheNode.y;\r\n            n.w = cacheNode.w;\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // if we found cache re-use those nodes that are still current\r\n    cacheNodes.forEach(cacheNode => {\r\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\r\n      if (j !== -1) {\r\n        // still current, use cache info positions\r\n        if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\r\n          this.findEmptyPosition(cacheNode, newNodes);\r\n        }\r\n        if (!cacheNode.autoPosition) {\r\n          nodes[j].x = cacheNode.x;\r\n          nodes[j].y = cacheNode.y;\r\n          nodes[j].w = cacheNode.w;\r\n          newNodes.push(nodes[j]);\r\n        }\r\n        nodes.splice(j, 1);\r\n      }\r\n    });\r\n    // ...and add any extra non-cached ones\r\n    if (nodes.length) {\r\n      if (typeof layout === 'function') {\r\n        layout(column, prevColumn, newNodes, nodes);\r\n      } else if (!domOrder) {\r\n        let ratio = column / prevColumn;\r\n        let move = (layout === 'move' || layout === 'moveScale');\r\n        let scale = (layout === 'scale' || layout === 'moveScale');\r\n        nodes.forEach(node => {\r\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\r\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\r\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\r\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\r\n          newNodes.push(node);\r\n        });\r\n        nodes = [];\r\n      }\r\n    }\r\n\r\n    // finally re-layout them in reverse order (to get correct placement)\r\n    if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\r\n    this._inColumnResize = true; // prevent cache update\r\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\r\n    newNodes.forEach(node => {\r\n      this.addNode(node, false); // 'false' for add event trigger\r\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\r\n    });\r\n    this.batchUpdate(false);\r\n    delete this._inColumnResize;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\r\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\r\n    let copy: GridStackNode[] = [];\r\n    nodes.forEach((n, i) => {\r\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\r\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\r\n    });\r\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\r\n    this._layouts[column] = copy;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\r\n   * @param node single node to cache\r\n   * @param column corresponding column index to save it under\r\n   */\r\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\r\n    n._id = n._id || GridStackEngine._idSeq++;\r\n    let l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\r\n    if (n.autoPosition) { delete l.x; delete l.y; l.autoPosition = true; }\r\n    this._layouts = this._layouts || [];\r\n    this._layouts[column] = this._layouts[column] || [];\r\n    let index = this.findCacheLayout(n, column);\r\n    if (index === -1)\r\n      this._layouts[column].push(l);\r\n    else\r\n      this._layouts[column][index] = l;\r\n    return this;\r\n  }\r\n\r\n  protected findCacheLayout(n: GridStackNode, column: number): number {\r\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\r\n  }\r\n\r\n\r\n  /** called to remove all internal values but the _id */\r\n  public cleanupNode(node: GridStackNode): GridStackEngine {\r\n    for (let prop in node) {\r\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\r\n    }\r\n    return this;\r\n  }\r\n}\r\n","/*!\r\n * GridStack 7.3.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions,\r\n  dragInDefaultOptions, GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn } from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || opt.addRemoveCB) {\r\n      if (opt.addRemoveCB) {\r\n        el = opt.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n        parent.appendChild(el);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass ? '.' + opts.itemClass : gridDefaults.removableOptions.accept,\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItem = (Utils.closestUpByClass(this.el, gridDefaults.itemClass) as GridItemHTMLElement)?.gridstackNode;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'grid-stack-instance-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (this.opts.children) {\r\n      let children = this.opts.children;\r\n      delete this.opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n      this.el.style.setProperty(\"--grid-column\", `${this.opts.column}`);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackNode): w is GridStackNode { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    let node: GridStackNode;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      node = options = els;\r\n      if (node?.el) {\r\n        el = node.el; // re-use element stored in the node\r\n      } else if (this.opts.addRemoveCB) {\r\n        el = this.opts.addRemoveCB(this.el, options, true, false);\r\n      } else {\r\n        let content = options?.content || '';\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n      }\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // see if there is a sub-grid to create\r\n    if (node.subGrid) {\r\n      this.makeSubGrid(node.el, undefined, undefined, false); //node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this._prevColumn && this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if ((node.subGrid as GridStack)?.el) return node.subGrid as GridStack; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGrid;\r\n      grid = grid.parentGridItem?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({...(subGridTemplate || {}), children: undefined, ...(ops || node.subGrid as GridStackOptions)});\r\n    node.subGrid = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGrid;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (this.opts.addRemoveCB) {\r\n        newItem = this.opts.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n        newItem = doc.body.children[0] as HTMLElement;\r\n        newItem.appendChild(content);\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n        content = doc.body.children[0] as HTMLElement;\r\n        node.el.appendChild(content);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    if (this.opts.addRemoveCB) {\r\n      ops.addRemoveCB = ops.addRemoveCB || this.opts.addRemoveCB;\r\n    }\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if ((n.subGrid as GridStack)?.el) {\r\n          const listOrOpt = (n.subGrid as GridStack).save(saveContent, saveGridOpt);\r\n          n.subGrid = (saveGridOpt ? listOrOpt : {children: listOrOpt}) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addRemove: boolean | AddRemoveFcn = this.opts.addRemoveCB || true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option to creating will use it\r\n    const prevCB = this.opts.addRemoveCB;\r\n    if (typeof(addRemove) === 'function') this.opts.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (this.opts.addRemoveCB)\r\n            this.opts.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    prevCB ? this.opts.addRemoveCB = prevCB : delete this.opts.addRemoveCB;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.el.style.setProperty(\"--grid-column\", `${column}`);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => (callback as GridStackNodesHandler)(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) (n.subGrid as GridStack).setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('min-height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.minHeight = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    el.classList.add(this.opts.itemClass);\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); el.style.setProperty(\"--gs-x\", String(n.x)) }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); el.style.setProperty(\"--gs-w\", String(n.w)) }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        changedColumn = true;\r\n        this.column(this.parentGridItem.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.parentGridItem;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '7.3.0';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    if (typeof dragIn === 'string') {\r\n      dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n      Utils.getElements(dragIn).forEach(el => {\r\n        if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n      if (val) delete node.noMove; else node.noMove = true;\r\n      this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n      if (val) delete node.noResize; else node.noResize = true;\r\n      this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);// @ts-ignore\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);// @ts-ignore\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this.movable(n.el, doEnable);\r\n      if (n.subGrid && recurse) (n.subGrid as GridStack).enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this.resizable(n.el, doEnable);\r\n      if (n.subGrid && recurse) (n.subGrid as GridStack).enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      helper = helper || el;\r\n      let parent = this.el.getBoundingClientRect();\r\n      let {top, left} = helper.getBoundingClientRect();\r\n      left -= parent.left;\r\n      top -= parent.top;\r\n      let ui: DDUIData = {position: {top, left}};\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // console.log('dropover without leave'); // TEST\r\n          let otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // load any element attributes if we don't have a node\r\n        if (!node) {// @ts-ignore private read only on ourself\r\n          node = this._readAttr(el);\r\n        }\r\n        if (!node.grid) {\r\n          node._isExternal = true;\r\n          el.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = {...node, w, h, grid: this};\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n        node._isExternal =  // DOM needs to be re-parented on a drop\r\n        node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w; node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        this._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          if (wasAdded) {\r\n            el = el.cloneNode(true) as GridItemHTMLElement;\r\n          }\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this._removeDD(el);\r\n        }\r\n        if (!wasAdded) return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = (node.subGrid as GridStack)?.el?.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);// @ts-ignore\r\n        this._writeAttr(el, node);\r\n        el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n        this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        if (subGrid) {\r\n          subGrid.parentGridItem = node;\r\n          if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);// @ts-ignore\r\n        this._triggerAddEvent();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        window.setTimeout(() => {\r\n          // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n          if (node.el && node.el.parentElement) {\r\n            this._prepareDragDropByNode(node);\r\n          } else {\r\n            this.engine.removeNode(node);\r\n          }\r\n          delete node.grid._isTemp;\r\n        });\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashEl) return this;\r\n      // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n      // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n      // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n      if (!dd.isDroppable(trashEl)) {\r\n        dd.droppable(trashEl, this.opts.removableOptions)\r\n          .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\r\n          .on(trashEl, 'dropout',  (event, el) => this._itemRemoving(el, false));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop **/\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      let onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      let dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      let onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          let gridToNotify = el.gridstackNode.grid;\r\n          if (gridToNotify._gsEventHandler[event.type]) {\r\n            gridToNotify._gsEventHandler[event.type](event, target);\r\n          }\r\n          this._removeDD(el);\r\n          gridToNotify.engine.removedNodes.push(node);\r\n          gridToNotify._triggerRemoveEvent();\r\n          // break circular links and remove DOM\r\n          delete el.gridstackNode;\r\n          delete node.el;\r\n          el.remove();\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start **/\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n      if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n      if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize **/\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      let prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        let row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      let left = ui.position.left + mLeft;\r\n      let top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }// @ts-ignore\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   **/\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      this._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside (like a toolbar) so nuke any node info\r\n      delete node.el;\r\n      delete el.gridstackNode;\r\n      // and restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * types.ts 7.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: '.grid-stack-item' },\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/** different layout options when changing # of columns,\r\n * including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n */\r\nexport type ColumnOptions = 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\n\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  addRemoveCB?: AddRemoveFcn;\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** @internal Use `GridStack.setupDragIn()` instead (global, not per grid). old way to allow external items to be draggable. (default: undefined) */\r\n  dragIn?: string;\r\n\r\n  /** @internal Use `GridStack.setupDragIn()` instead (global, not per grid).  old way to allow external items to be draggable. (default: undefined) */\r\n  dragInOptions?: DDDragInOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** id used to debug grid instance, not currently stored in DOM attributes */\r\n  id?: numberOrString;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us */\r\n  subGrid?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent resizing (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents moving (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** prevents being moved by others during their (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: numberOrString;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime */\r\n  subGrid?: GridStackOptions | GridStack;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: '.' + opts.itemClass) */\r\n  accept?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** parent constraining where item can be dragged out from (default: null = no constrain) */\r\n  // containment?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping (ex: 'clone' or your own method) */\r\n  helper?: string | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to Grid instance */\r\n  grid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\r\n * utils.ts 7.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = document.querySelector(parent as string);\r\n    } else {\r\n      parentNode = parent as HTMLElement;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(270);\n"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","disabled","this","_disabled","on","event","callback","off","enable","disable","destroy","triggerEvent","eventName","DDDraggable","DDBaseImplement","constructor","el","option","super","handleName","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","addEventListener","isTouch","touchstart","pointerdown","remove","add","forDestroy","removeEventListener","dragTimeout","window","clearTimeout","dragging","mouseDownEvent","helper","updateOption","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","name","target","nodeName","toLowerCase","find","skip","closest","dragElement","dropElement","document","touchmove","touchend","preventDefault","activeElement","blur","_callDrag","ev","Utils","initEvent","type","drag","ui","s","_dragFollow","pauseDrag","pause","Number","isInteger","setTimeout","Math","abs","x","y","grid","gridstackNode","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","start","parentElement","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","parentNode","dragElementOriginStyle","originStyleProp","map","prop","pointerEvents","width","height","willChange","transition","node","_isAboutToRemove","offset","left","clientX","offsetLeft","top","clientY","offsetTop","getComputedStyle","match","parent","xformOffsetX","xformOffsetY","testEl","createElement","addElStyles","opacity","zIndex","appendChild","testElPosition","getBoundingClientRect","removeChild","targetOffset","containmentRect","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDElement","static","ddDraggable","indexOf","ddResizable","setupDraggable","cleanDraggable","setupResizable","DDResizable","cleanResizable","setupDroppable","cleanDroppable","resizable","value","_getDDElements","dEl","handles","getAttribute","autoHide","alwaysShowResizeHandle","resize","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","els","create","hosts","getElements","length","list","init","filter","d","DDResizableHandle","host","direction","moving","dir","_init","prefix","userSelect","_triggerEvent","newRect","originalRect","scrolled","rect","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","overResizeElement","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","i","oEvent","offsetX","offsetY","constrain","_constrainSize","round","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","min","max","containmentEl","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","touchHandled","pointerLeaveTimeout","wasDragging","releasePointerCapture","pointerId","GridStackEngine","addedNodes","removedNodes","column","maxRow","_float","float","nodes","onChange","batchUpdate","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","w","h","didMove","newOpt","pack","moved","locked","moveNode","copyPos","undefined","skip2","n","isIntercepted","collideAll","directionCollideCoverage","o","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","cacheRects","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","copyNodes","autoPosition","addNode","val","sort","_updating","_orig","newY","prepareNode","resizing","_id","_idSeq","defaults","noResize","noMove","isNaN","nodeBoundFix","before","maxW","maxH","minW","minH","_inColumnResize","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","cleanNodes","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","clone","canMove","getRow","c","willItFit","_willFitPos","cleanupNode","content","p","wasUndefinedPack","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","reduce","row","beginUpdate","endUpdate","save","saveElement","len","layout","wl","l","removeInternalForSave","layoutsNodesChange","ratio","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","scale","clear","index","dd","DDGridStack","GridStack","_gsEventHandler","_extraDragRow","minRow","rowAttr","toNumber","anyOpts","oneColumnSize","_alwaysShowResizeHandle","cloneDeep","gridDefaults","staticGrid","toBool","handleClass","removableOptions","itemClass","animate","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","rtl","parentGridItem","closestUpByClass","subGrid","_isAutoCellHeight","cellHeight","cellHeightUnit","_styleSheetClass","_setStaticClass","engineClass","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","children","load","setAnimation","setProperty","setupDragIn","dragInOptions","_setupRemoveDrop","_setupAcceptWidget","_updateWindowResizeEvent","options","elOrString","getGridElement","gridstack","console","error","selector","grids","getGridElements","addRemoveCB","doc","implementation","createHTMLDocument","innerHTML","class","placeholder","_placeholder","placeholderChild","className","placeholderText","placeholderClass","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","_updateContainerHeight","_ignoreLayoutsNodeChange","_triggerAddEvent","_triggerChangeEvent","ops","nodeToAdd","saveContent","subGridTemplate","makeWidget","autoColumn","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","addGrid","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","margin","origShow","removeInternalAndSame","addRemove","items","prevCB","removed","id","item","_triggerRemoveEvent","getCellHeight","forcePixel","offsetHeight","rows","parseInt","marginDiff","cellWidth","data","parseHeight","unit","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","Array","from","setStatic","_removeStylesheet","removeAttribute","getFloat","getCellFromPixel","useDocRelative","containerPos","documentElement","relativeLeft","relativeTop","columnWidth","rowHeight","getElement","noData","detail","log","doAnimate","updateClass","recurse","warn","m","k","changed","ddChanged","marginUnit","getMargin","elements","CustomEvent","bubbles","Event","_styles","removeStylesheet","forceUpdate","styleLocation","styleInHead","createStylesheet","nonce","_max","addCSSRule","getHeight","setAttribute","String","removeProperty","same","attrs","hasOwnProperty","classes","onParentResize","changedColumn","oneColumn","cellHeightThrottle","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","dragInDefaultOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","offsetWidth","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","onStartMoving","dragOrResize","onEndMoving","gridToNotify","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","distance","scroll","updateScrollPosition","prev","extra","updateScrollResize","commit","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","args","apply","prototype","info","oldAttr","querySelectorAll","getElementById","x0","x1","y0","y1","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","Boolean","Error","parseFloat","sources","source","doMinMax","removeEl","func","delay","isWaiting","scrollingElement","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","styles","isArray","evt","which","buttons","dataTransfer","ctrlKey","altKey","shiftKey","metaKey","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}